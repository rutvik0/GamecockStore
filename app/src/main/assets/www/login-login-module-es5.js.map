{"version":3,"sources":["webpack:///src/app/login/login.page.html","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/login.page.scss","webpack:///src/app/login/login.page.ts"],"names":["routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","router","formBuilder","toastController","itemService","db","imgfile","new_item_form","group","email","required","password","navigate","item","console","log","self","signInWithEmailAndPassword","then","result","user","currentUser","uid","collection","where","get","querySnapshot","forEach","doc","id","data","type","usertype","setUsertype","error","presentToast","errorCode","code","errorMessage","message","alert","reset","create","color","position","duration","toast","present","provider","GoogleAuthProvider","addScope","signInWithPopup","token","credential","providerId","selector","template"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar mode=\\\"ios\\\">\\n    <ion-title>Login</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"signup()\\\"> Create Account </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  \\n  <ion-img [src]=\\\"imgfile\\\"></ion-img>\\n  <form [formGroup]=\\\"new_item_form\\\" (submit)=\\\"login(new_item_form.value)\\\">\\n      <ion-item>\\n        <ion-label color=\\\"primary\\\" position=\\\"floating\\\">Email</ion-label>\\n        <ion-input type=\\\"text\\\" formControlName=\\\"email\\\" required></ion-input>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label color=\\\"primary\\\" position=\\\"floating\\\">Password</ion-label>\\n        <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" required></ion-input>\\n      </ion-item>\\n  \\n      <ion-button class=\\\"submit-btn\\\" expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"!new_item_form.valid\\\">Login</ion-button>\\n    </form>\\n      <ion-button color=\\\"secondary\\\" class=\\\"submit-btn\\\" expand=\\\"block\\\" (click)=\\\"loginGoogle()\\\">Login using Google</ion-button>\\n  \\n  </ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastController } from '@ionic/angular';\nimport { ItemService } from '../item.service';\n\nimport * as firebase from 'firebase';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  new_item_form: FormGroup;\n  db = firebase.firestore();\n  imgfile=\"/assets/white.png\";\n\n  constructor(\n    private router: Router,\n    public formBuilder: FormBuilder,\n    private toastController: ToastController,\n    public itemService:ItemService\n  ) { }\n\n  ngOnInit() {\n     this.new_item_form = this.formBuilder.group({\n       email: new FormControl('', Validators.required),\n       password: new FormControl('', Validators.required)\n     });\n  }\n\n  signup() {\n    this.router.navigate([\"/signup\"]);\n  }\n\n  login(item) {\n    console.log(item.email+ \" \" +item.password);\n    var self = this;\n    var email = item.email;\n    var password = item.password;\n    \n    firebase.auth().signInWithEmailAndPassword(email, password).then(function(result) {\n      var user= firebase.auth().currentUser;\n          console.log(\"login succeeded\");\n          console.log(user.uid);\n          //get my usertype from database \n          self.db.collection(\"usertype\").where(\"uid\", \"==\", user.uid)\n            .get()\n            .then(function(querySnapshot) {\n                querySnapshot.forEach(function(doc) {\n                    console.log(doc.id, \" => \", doc.data());\n                    var type = doc.data().usertype;\n                    console.log(\"usertype:\"+type);\n                    self.itemService.setUsertype(type);\n                });\n            })\n            .catch(function(error) {\n                console.log(\"Error getting documents: \", error);\n            });\n            self.presentToast();\n        self.router.navigate([\"/tabs/tab1\"]);\n\n          }).catch(function(error) {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      console.log(errorCode);\n\n      if (errorCode === 'auth/wrong-password') {\n        alert('Wrong password.');\n      } else if (errorCode === 'auth/user-not-found'){\n        alert(\"User does not exist\");\n      }\n      console.log(error);\n    });\n    this.new_item_form.reset();\n  }\n\n  async presentToast() {\n    const toast = await this.toastController.create({\n      color:'success',\n      message: 'Login Successful',\n      position:'top',\n      duration: 2000\n    });\n    toast.present();\n  }\n\n  loginGoogle(){\n    var self=this;\n    console.log(\"google login\")\n    // Using a popup.\n  var provider = new firebase.auth.GoogleAuthProvider();\n  provider.addScope('profile');\n  provider.addScope('email');\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n   // This gives you a Google Access Token.\n   var token = result.credential.providerId;\n   // The signed-in user info.\n   var user = result.user;\n   console.log(user.uid);\n   self.itemService.setUsertype(\"visitor\");\n   console.log(\"login succeeded\")\n   self.router.navigate([\"/tabs/tab1\"]);\n  });\n}\n\n\n}\n"]}